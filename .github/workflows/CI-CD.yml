name: Java CI/CD with Gradle

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant Execute Permission For Gradlew
        run: chmod +x gradlew

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build With Gradle
        run: ./gradlew build -x test

      - name: Docker Image Build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/refit .

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Docker Hub Push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/refit

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    steps:
      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PEM_KEY }}
          port: 22
          script: |
            set -e

            echo "🔐 EC2에서 Docker Hub 로그인"
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}

            echo "▶️ 현재 실행 중인 서비스 확인"
            CURRENT=$(docker ps --filter "name=refit-" --format "{{.Names}}" | grep -E 'refit-blue|refit-green' || true)

            if [[ "$CURRENT" == *"blue"* ]]; then
              TARGET="green"
              PORT=8082
            else
              TARGET="blue"
              PORT=8081
            fi
            
            echo "🌀 대상 색상: $TARGET (포트: $PORT)"
            
            echo "📦 이미지 pull"
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/refit

            echo "🧹 기존 컨테이너 삭제 (refit-$TARGET)"
            docker rm -f refit-$TARGET || true

            echo "🚀 새 컨테이너 실행 (refit-$TARGET)"
            docker run -d --name refit-$TARGET \
              --env-file /home/ubuntu/app-$TARGET/refit.env \
              --network refit-network \
              -p $PORT:8080 \
              ${{ secrets.DOCKERHUB_USERNAME }}/refit

            echo "🔀 Nginx 설정 proxy_pass 전환"
            sudo sed -i "s|proxy_pass http://localhost:[0-9]\+;|proxy_pass http://localhost:$PORT;|" /etc/nginx/conf.d/default.conf
            sudo nginx -t && sudo systemctl reload nginx

            echo "✅ 무중단 배포 완료 → 현재: $TARGET"