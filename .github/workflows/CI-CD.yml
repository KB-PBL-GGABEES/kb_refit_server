name: Java CI/CD with Gradle

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant Execute Permission For Gradlew
        run: chmod +x gradlew

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build With Gradle
        run: ./gradlew build -x test

      - name: Docker Image Build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/refit .

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Docker Hub Push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/refit

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    steps:
      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PEM_KEY }}
          port: 22
          script: |
            set -e

            echo "🔐 EC2에서 Docker Hub 로그인"
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}

            echo "🌐 Docker 네트워크 보장"
            docker network create refit-network >/dev/null 2>&1 || true

            echo "🔎 Nginx에서 현재 ACTIVE 포트 판별(proxy_pass 기준)"
            ACTIVE_PORT=$(grep -Po 'proxy_pass http://localhost:\K[0-9]+' /etc/nginx/conf.d/default.conf | tail -1 || true)
            if [ -z "${ACTIVE_PORT:-}" ]; then
              echo "⚠️ proxy_pass 포트를 찾지 못함 → 최초 배포로 간주 (ACTIVE=none)"
              ACTIVE="none"
              ACTIVE_PORT="0"
            elif [ "$ACTIVE_PORT" = "8081" ]; then
              ACTIVE="blue"
            elif [ "$ACTIVE_PORT" = "8082" ]; then
              ACTIVE="green"
            else
              echo "❌ 예상치 못한 ACTIVE_PORT: $ACTIVE_PORT"; exit 1
            fi

            if [ "$ACTIVE" = "blue" ]; then
              TARGET="green"; TARGET_PORT="8082"; TARGET_NAME="refit-green"; ACTIVE_NAME="refit-blue"
            elif [ "$ACTIVE" = "green" ]; then
              TARGET="blue";  TARGET_PORT="8081";  TARGET_NAME="refit-blue";  ACTIVE_NAME="refit-green"
            else
              TARGET="blue";  TARGET_PORT="8081";  TARGET_NAME="refit-blue";  ACTIVE_NAME=""
            fi

            echo "🟦 ACTIVE=$ACTIVE(:$ACTIVE_PORT) → 🟩 TARGET=$TARGET(:$TARGET_PORT)"

            echo "📦 이미지 pull"
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/refit

            echo "🧹 대상 슬롯 정리($TARGET_NAME)"
            docker rm -f "$TARGET_NAME" >/dev/null 2>&1 || true

            echo "🚀 새 컨테이너 실행 ($TARGET_NAME)"
            docker run -d --name "$TARGET_NAME" \
              --env-file "/home/ubuntu/app-$TARGET/refit.env" \
              --network refit-network \
              -p ${TARGET_PORT}:8080 \
              ${{ secrets.DOCKERHUB_USERNAME }}/refit

            echo "🩺 헬스체크 시작 (TARGET on :${TARGET_PORT})"
            # /actuator/health 를 쓰는 경우 ↓, 없으면 /health 로 변경
            HEALTH_URL="http://127.0.0.1:${TARGET_PORT}/api/auth/health"
            MAX_RETRY=60    # 총 60회 (약 120초) 재시도
            SLEEP_SEC=2

            healthy="no"
            for i in $(seq 1 $MAX_RETRY); do
              if curl -fsS "$HEALTH_URL" >/dev/null; then
                healthy="yes"; break
              fi
              sleep $SLEEP_SEC
            done

            if [ "$healthy" != "yes" ]; then
              echo "❌ 새 슬롯 헬스체크 실패 → 전환 중단 및 새 컨테이너 정리"
              docker logs --tail=200 "$TARGET_NAME" || true
              docker rm -f "$TARGET_NAME" || true
              exit 1
            fi

            echo "✅ 헬스 OK → Nginx proxy_pass 전환"
            sudo sed -i "s|proxy_pass http://localhost:[0-9]\+;|proxy_pass http://localhost:${TARGET_PORT};|" /etc/nginx/conf.d/default.conf
            sudo nginx -t && sudo systemctl reload nginx

            echo "👀 전환 후 스모크 테스트 (외부 경로)"
            # 서비스 도메인으로 교체 권장: https://kb-refit.cloud/health
            SMOKE_URL="https://kb-refit.cloud/api/auth/health"
            SMOKE_MAX=10
            ok="no"
            for i in $(seq 1 $SMOKE_MAX); do
              if curl -fkSs "$SMOKE_URL" >/dev/null; then
                ok="yes"; break
              fi
              sleep 2
            done

            if [ "$ok" != "yes" ]; then
              echo "⚠️ 스모크 실패 → 롤백 수행"
              # proxy_pass를 이전 포트로 되돌리기
              if [ "$ACTIVE_PORT" != "0" ]; then
                sudo sed -i "s|proxy_pass http://localhost:[0-9]\+;|proxy_pass http://localhost:${ACTIVE_PORT};|" /etc/nginx/conf.d/default.conf
                sudo nginx -t && sudo systemctl reload nginx
              fi
              # 문제 컨테이너 정리
              docker rm -f "$TARGET_NAME" || true
              exit 1
            fi

            echo "🧹 이전 슬롯 정리"
            if [ -n "${ACTIVE_NAME:-}" ] && [ "$ACTIVE" != "none" ]; then
              docker rm -f "$ACTIVE_NAME" >/dev/null 2>&1 || true
              echo "✔ 이전 활성 컨테이너 ($ACTIVE_NAME) 삭제 완료"
            fi

            echo "🎉 무중단 배포 완료 → 현재 활성: $TARGET(:$TARGET_PORT)"